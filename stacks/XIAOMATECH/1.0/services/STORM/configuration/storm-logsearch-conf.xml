<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<configuration supports_final="false" supports_adding_forbidden="true">
    <property>
        <name>service_name</name>
        <display-name>Service name</display-name>
        <description>Service name for Logsearch Portal (label)</description>
        <value>Storm</value>
        <on-ambari-upgrade add="true"/>
    </property>
    <property>
        <name>component_mappings</name>
        <display-name>Component mapping</display-name>
        <description>Logsearch component logid mapping list (e.g.: COMPONENT1:logid1,logid2;COMPONENT2:logid3)</description>
        <value>NIMBUS:storm_nimbus;SUPERVISOR:storm_supervisor,storm_worker,storm_logviewer,storm_worker_event;STORM_UI_SERVER:storm_ui;DRPC_SERVER:storm_drpc</value>
        <on-ambari-upgrade add="true"/>
    </property>
    <property>
        <name>content</name>
        <display-name>Logfeeder Config</display-name>
        <description>Metadata jinja template for Logfeeder which contains grok patterns for reading service specific logs.</description>
        <value>
            {
            "input":[
            {
            "type":"storm_drpc",
            "rowtype":"service",
            "path":"{{default('/configurations/storm-env/storm_log_dir', '/var/log/storm')}}/drpc.log"
            },
            {
            "type":"storm_logviewer",
            "rowtype":"service",
            "path":"{{default('/configurations/storm-env/storm_log_dir', '/var/log/storm')}}/logviewer.log"
            },
            {
            "type":"storm_nimbus",
            "rowtype":"service",
            "path":"{{default('/configurations/storm-env/storm_log_dir', '/var/log/storm')}}/nimbus.log"
            },
            {
            "type":"storm_supervisor",
            "rowtype":"service",
            "path":"{{default('/configurations/storm-env/storm_log_dir', '/var/log/storm')}}/supervisor.log"
            },
            {
            "type":"storm_ui",
            "rowtype":"service",
            "path":"{{default('/configurations/storm-env/storm_log_dir', '/var/log/storm')}}/ui.log"
            }
            ,{
            "type":"storm_worker",
            "rowtype":"service",
            "path":"{{default('/configurations/storm-env/storm_log_dir', '/var/log/storm')}}/workers-artifacts/*/*/worker.log",
            "init_default_fields": "true"
            },
            {
            "type":"storm_worker_event",
            "rowtype":"service",
            "path":"{{default('/configurations/storm-env/storm_log_dir', '/var/log/storm')}}/workers-artifacts/*/*/events.log",
            "init_default_fields": "true",
            "add_fields": {
            "level":"INFO"
            }
            }
            ],
            "filter":[
            {
            "filter":"grok",
            "sort_order": 1,
            "conditions":{
            "fields":{
            "type":[
            "storm_nimbus",
            "storm_supervisor",
            "storm_logviewer",
            "storm_drpc",
            "storm_ui",
            "storm_worker"
            ]
            }
            },
            "log4j_format":"",
            "multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
            "message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{JAVACLASS:logger_name}\\s%{GREEDYDATA:thread_name}\\s\\[%{LOGLEVEL:level}\\]\\s%{GREEDYDATA:log_message}",
            "post_map_values":{
            "logtime":{
            "map_date":{
            "target_date_pattern":"yyyy-MM-dd HH:mm:ss.SSS"
            }
            }
            }
            },
            {
            "filter":"grok",
            "sort_order": 2,
            "conditions":{
            "fields":{
            "type":[
            "storm_worker"
            ]
            }
            },
            "source_field": "thread_name",
            "remove_source_field": "false",
            "message_pattern":"(Thread\\-[0-9]+\\-[0-9]+\\-%{DATA:sdi_streamline_component_name}\\-executor%{DATA}|%{DATA:thread_name})"
            },
            {
            "filter":"grok",
            "sort_order": 3,
            "conditions":{
            "fields":{
            "type":[
            "storm_worker"
            ]
            }
            },
            "source_field": "path",
            "remove_source_field": "false",
            "message_pattern":"{{default('/configurations/storm-env/storm_log_dir', '/var/log/storm')}}/workers-artifacts/%{DATA:sdi_storm_topology_id}/%{DATA:sdi_storm_worker_port}/worker\\.log"
            },
            {
            "filter":"grok",
            "sort_order": 4,
            "conditions":{
            "fields":{
            "type":[
            "storm_worker"
            ]
            }
            },
            "source_field": "sdi_storm_topology_id",
            "remove_source_field": "false",
            "message_pattern":"(streamline\\-%{DATA:sdi_streamline_topology_id}\\-%{DATA:sdi_streamline_topology_name}\\-[0-9]+\\-[0-9]+)|(%{DATA:sdi_storm_topology_id})"
            },
            {
            "filter":"grok",
            "sort_order": 5,
            "conditions":{
            "fields":{
            "type":[
            "storm_worker_event"
            ]
            }
            },
            "log4j_format":"",
            "message_pattern":"^%{TIMESTAMP_ISO8601:logtime}(!_DELIM_!&lt;STREAMLINE_EVENT&gt;!_DELIM_!%{DATA:sdi_streamline_component_name}!_DELIM_!%{DATA:sdi_streamline_event_id}!_DELIM_!%{DATA:sdi_streamline_root_ids}!_DELIM_!%{DATA:sdi_streamline_parent_ids}!_DELIM_!%{DATA:sdi_streamline_event_fields_and_values}!_DELIM_!%{DATA:sdi_streamline_event_headers}!_DELIM_!%{DATA:sdi_streamline_event_aux_fields_and_values})|(%{GREEDYDATA})",
            "post_map_values":{
            "logtime":{
            "map_date":{
            "target_date_pattern":"yyyy-MM-dd HH:mm:ss.SSS"
            }
            }
            }
            },
            {
            "filter":"grok",
            "sort_order": 6,
            "conditions":{
            "fields":{
            "type":[
            "storm_worker_event"
            ]
            }
            },
            "source_field": "path",
            "remove_source_field": "false",
            "message_pattern":"{{default('/configurations/storm-env/storm_log_dir', '/var/log/storm')}}/workers-artifacts/%{DATA:sdi_storm_topology_id}/%{DATA:sdi_storm_worker_port}/events\\.log"
            },
            {
            "filter":"grok",
            "sort_order": 7,
            "conditions":{
            "fields":{
            "type":[
            "storm_worker_event"
            ]
            }
            },
            "source_field": "sdi_storm_topology_id",
            "remove_source_field": "false",
            "message_pattern":"(streamline\\-%{DATA:sdi_streamline_topology_id}\\-%{DATA:sdi_streamline_topology_name}\\-[0-9]+\\-[0-9]+)|(%{DATA:sdi_storm_topology_id})"
            }
            ]
            }
        </value>
        <value-attributes>
            <type>content</type>
            <show-property-name>false</show-property-name>
        </value-attributes>
        <on-ambari-upgrade add="true" update="true"/>
    </property>
</configuration>