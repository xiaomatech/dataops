<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>
    <property>
        <name>nginx_user</name>
        <value>nginx</value>
        <property-type>USER</property-type>
        <description>Service user for nginx</description>

        <value-attributes>
            <type>user</type>
            <overridable>false</overridable>
            <user-groups>
                <property>
                    <type>cluster-env</type>
                    <name>user_group</name>
                </property>
            </user-groups>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>

    <property>
        <name>content</name>
        <display-name>nginx.conf</display-name>
        <description>nginx.conf content</description>
        <value><![CDATA[
user nobody nobody;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 1048576;

pcre_jit on;

error_log  {{log_dir}}/error.log;

pid /usr/local/openresty/nginx/logs/nginx.pid;

events {
	use epoll;
	worker_connections 65535;
	multi_accept on;
	accept_mutex off;
}

stream {
    log_format proxy '{"timestamp":"$time_local",'
                     '"protocol":"$protocol",'
                     '"bytes_sent":"$bytes_sent",'
                     '"bytes_received":"$bytes_received",'
                     '"session_time":"$session_time",'
                     '"upstream_addr":"$upstream_addr",'
                     '"upstream_bytes_sent":"$upstream_bytes_sent",'
                     '"upstream_bytes_received":"$upstream_bytes_received",'
                     '"upstream_connect_time":"$upstream_connect_time",'
                     '"status":"$status"}';

    access_log  {{log_dir}}/stream_access.log proxy buffer=64k;

    open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;

    #upstream
    include stream_upstream/*.conf;

    #server
    include stream_vhost/*.conf;
}

http {
	include mime.types;
	default_type  application/octet-stream;
	log_subrequest on;

	log_format main escape=json '{"timestamp":"$time_iso8601",'
    '"request_time":"$request_time",'
    '"host":"$server_addr",'
    '"body_bytes_sent":$body_bytes_sent,'
    '"request_length":$request_length,'
    '"domain":"$host",'
    '"status": $status,'
    '"request_method":"$request_method",'
    '"http_referer":"$http_referer",'
    '"http_user_agent":"$http_user_agent",'
    '"request":"$request",'
    '"remote_user":"$remote_user",'
    '"remote_addr":"$remote_addr",'
    '"url":"$uri",'
    '"request_uri":"$request_uri",'
    '"query_string":"$query_string",'
    '"upstream_addr":"$upstream_addr",'
    '"upstream_status":"$upstream_status",'
    '"upstream_cache_status":"$upstream_cache_status",'
    '"upstream_response_time":"$upstream_response_time",'
    '"cookie":"$http_cookie",'
    '"request_body":"$request_body",'
    '"geoip":"$geoip",'
    '"ipip":"$ipip",'
    '"useragent":"$useragent",'
    '"cookies":"$cookies",'
    '"referers":"$referers",'
    '"request_id":"$request_id"}';


	access_log  {{log_dir}}/access.log main buffer=64k	flush=10m;

	sendfile on;
	tcp_nopush     off;
	tcp_nodelay on;

	reset_timedout_connection on;
	client_body_timeout	10s;
	client_header_timeout 10s;
	send_timeout 5s;

	keepalive_timeout  30;
	keepalive_requests 10000;

	types_hash_max_size 2048;
	server_name_in_redirect off;
	port_in_redirect off;

	server_tokens off;

	connection_pool_size 256;
	client_header_buffer_size 4k;
	large_client_header_buffers 4 64k;
	request_pool_size 64k;
	output_buffers 4 64k;
	postpone_output 1460;
	client_body_buffer_size 256k;

	open_file_cache max=200000 inactive=20s;
	open_file_cache_min_uses 2;
	open_file_cache_valid 30s;
	open_file_cache_errors on;

	client_max_body_size 2m;

	open_log_file_cache max=1000 inactive=30s valid=1m min_uses=2;
	add_header X-Upstream-Cache-Status "$upstream_cache_status - $upstream_response_time";
	proxy_next_upstream error timeout invalid_header http_503;
	proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Host       $host;
	proxy_set_header X-Forwarded-Port       $server_port;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_redirect  off;
	proxy_buffering  on;
	proxy_buffer_size 8k;
	proxy_buffers   512 4k;
	proxy_busy_buffers_size 64k;
	proxy_http_version  1.1;
	proxy_set_header Host $host;
	proxy_pass_request_headers on;
    	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    	proxy_set_header X-Forwarded-Proto $scheme;
	proxy_set_header X-Request-Id $request_id;
	proxy_ignore_client_abort on;
	proxy_headers_hash_max_size 5120;
    	proxy_headers_hash_bucket_size 640;
    	proxy_set_header X-Use-X-Accel-Redirect True;
	proxy_set_header Early-Data $ssl_early_data;

	fastcgi_ignore_client_abort on;

	proxy_cache_path /dev/shm/proxy_cache keys_zone=proxy_cache:512m levels=1:2 max_size=8g inactive=5m use_temp_path=off;
	proxy_cache_key $scheme$proxy_host$uri$is_args$args$http_cookie;
	proxy_cache_valid 200 302 2s;
	proxy_cache_valid 404 1h;
	proxy_cache_valid any 1m;
	proxy_cache_lock on;
	proxy_cache_use_stale error timeout invalid_header http_500 http_502 http_503 http_504 updating;
	proxy_cache_min_uses 1;
	proxy_no_cache $cookie_nocache $arg_nocache;

    	gzip  on;
    	gzip_proxied expired no-cache no-store private auth;
    	gzip_min_length  4k;
    	gzip_buffers     4 32k;
    	gzip_http_version 1.1;
    	gzip_comp_level 1;
    	gzip_types  text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    	gzip_vary on;
    	gzip_disable  "msie6";

    	disable_symlinks  if_not_owner;
	add_header X-Frame-Options "SAMEORIGIN";
	#add_header X-Content-Type-Options "nosniff";
	add_header X-XSS-Protection "1; mode=block";
	add_header X-UA-Compatible 'IE=Edge,chrome=1';
	add_header X-Download-Options "noopen";
	add_header X-Permitted-Cross-Domain-Policies "master-only";
	add_header Timing-Allow-Origin "*";
	add_header X-Request-Id $request_id;
    	add_header "Cache-Control" "no-transform";
    	add_header "Access-Control-Allow-Origin" "*";
	add_header "Access-Control-Allow-Credentials" "true";
	add_header 'Access-Control-Allow-Methods' "GET,POST,OPTIONS,DELETE,PUT";
	add_header Referrer-Policy "no-referrer-when-downgrade" always;
	add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

	# Diffie-Hellman parameter for DHE ciphersuites
	ssl_dhparam /etc/nginx/dhparam.pem;

	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

	# OCSP Stapling
	ssl_stapling on;
	ssl_stapling_verify on;
	resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
	resolver_timeout 2s;

	ssl_prefer_server_ciphers  on;
    	ssl_session_cache    shared:SSL:400m;
    	ssl_session_timeout  24h;
    	ssl_buffer_size      1400; # 1400 bytes to fit in one MTU
    	ssl_session_tickets on;
	ssl_early_data on;

    	#ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
	#ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
	#ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;

    	http2_chunk_size    200k;
    	http2_pool_size     8192;

    	lua_code_cache on;

    	lua_shared_dict ip2location 512m;
    	lua_shared_dict useragent 64m;
    	lua_shared_dict geoip 512m;

    	init_by_lua_file 'conf/lua/init.lua'

	server {
    		listen 443 backlog=16384 reuseport ssl http2;
    		server_name default;
    		root /data/www;

    		location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml|html)$ {
                expires	max;
                access_log	off;
                log_not_found	off;
                add_header	Cache-Control	"public";
            }

            include 'conf/server_util.conf';
    }

    #upstream
    include upstream/*.conf;

    #server
    include vhost/*.conf;

}
         ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>

    <property>
        <name>nginx_log_dir</name>
        <value>/data1/log/nginx</value>
        <description>Log directory for nginx</description>
    </property>
    <property>
        <name>nginx_pid_dir</name>
        <value>/usr/local/openresty/nginx/logs/</value>
        <description>run directory for nginx</description>
    </property>

    <property>
        <name>clicktail_content</name>
        <display-name>clicktail.conf</display-name>
        <description>clicktail.conf content</description>
        <value><![CDATA[
[Application Options]
APIHost = http://{{clickhouse_host}}:8123/
NumSenders = 10
BatchSize = 100000
BatchFrequencyMs = 1000
Localtime = true
BackOff = true

[Required Options]
ParserName = json
LogFiles = /data1/log/nginx/access.log
Dataset = clicktail.nginx_log

[JSON Parser Options]
TimeFieldName = timestamp
TimeFieldFormat = yyyy-mm-ddThh:mm:ss+hh:mm

        ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>
</configuration>
