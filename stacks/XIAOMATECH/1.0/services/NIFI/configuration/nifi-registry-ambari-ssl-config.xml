<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<configuration>

    <property>
        <name>nifi.registry.ssl.isenabled</name>
        <value>false</value>
        <display-name>Enable SSL?</display-name>
        <description>
            Check flag to enable SSL. If the NiFi CA is installed, this will automatically generate a keystore and
            truststore
            and will populate the necessary properties behind the scenes. If NiFi CA is not installed, the keystore and
            truststore
            properties must be provided.
        </description>
        <value-attributes>
            <type>boolean</type>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <property>
        <name>nifi.toolkit.tls.regenerate</name>
        <value>false</value>
        <display-name>NiFi CA Force Regenerate?</display-name>
        <description>Will force regeneration of Tls Certificates and Configuration</description>
        <value-attributes>
            <type>boolean</type>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <property>
        <name>nifi.registry.security.keystore</name>
        <value>{{ nifi_registry_config_dir }}/keystore.jks</value>
        <on-ambari-upgrade add="true"/>
        <display-name>Keystore path</display-name>
        <description>The full path and name of the keystore. To reference paths that include hostnames you can use
            format such as: /etc/security/nifi-certs/{nifi_node_ssl_host}/{nifi_node_ssl_host}.jks
        </description>
    </property>

    <property>
        <name>nifi.registry.security.keystoreType</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <display-name>Keystore type</display-name>
        <description>The keystore type. It is blank by default but required if nifi.node.ssl.isenabled=true. e.g. jks
        </description>
    </property>

    <property>
        <name>nifi.registry.security.keystorePasswd</name>
        <value/>
        <property-type>PASSWORD</property-type>
        <display-name>Keystore password</display-name>
        <description>The keystore password. It is blank by default but required if nifi.node.ssl.isenabled=true. If NiFi
            CA is in use and field is left blank password will be autogenerated.
        </description>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
            <type>password</type>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <property>
        <name>nifi.registry.security.keyPasswd</name>
        <value/>
        <property-type>PASSWORD</property-type>
        <display-name>Key password</display-name>
        <description>The key password. It is blank by default but required if nifi.node.ssl.isenabled=true. If NiFi CA
            is in use and field is left blank password will be autogenerated.
        </description>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
            <type>password</type>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <property>
        <name>nifi.registry.security.truststore</name>
        <value>{{ nifi_registry_config_dir }}/truststore.jks</value>
        <on-ambari-upgrade add="true"/>
        <display-name>Truststore path</display-name>
        <description>The full path and name of the truststore. To reference paths that include hostnames you can use
            format such as: /etc/security/nifi-certs/{nifi_node_ssl_host}/truststore.jks
        </description>
    </property>

    <property>
        <name>nifi.registry.security.truststoreType</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <display-name>Truststore type</display-name>
        <description>The truststore type. It is blank by default but required if nifi.node.ssl.isenabled=true. e.g.
            jks
        </description>
    </property>

    <property>
        <name>nifi.registry.security.truststorePasswd</name>
        <value/>
        <property-type>PASSWORD</property-type>
        <display-name>Truststore password</display-name>
        <description>The truststore password. It is blank by default but required if nifi.node.ssl.isenabled=true. If
            NiFi CA is in use and field is left blank password will be autogenerated.
        </description>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
            <type>password</type>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <property>
        <name>nifi.registry.security.needClientAuth</name>
        <value>false</value>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <value-attributes>
            <type>boolean</type>
        </value-attributes>
        <display-name>Clients need to authenticate?</display-name>
        <description>Specifies whether or not connecting clients must authenticate themselves. Specifically this
            property is used by the NiFi cluster protocol. If the Truststore properties are not set, this must be false.
            Otherwise, a value of true indicates that nodes in the cluster will be authenticated and must have
            certificates that are trusted by the Truststores.
        </description>
    </property>

    <property>
        <name>nifi.registry.initial.admin.identity</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <display-name>Initial Admin Identity</display-name>
        <description>
            The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. Must be specified when Ranger plugin for
            Nifi will not be used for authorization.
            Before changing value of this field, note that it will only take effect if authorizations.xml does not
            contain any existing policies.
            The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.
        </description>
    </property>

    <property>
        <name>content</name>
        <display-name>NiFi Identities</display-name>
        <description>
            NiFi Identity [unique key] - The identity of a NiFi node that will be given access to this flow registry.
            Before changing value of this field, note that it will only take effect if authorizations.xml does not
            contain any existing policies.
            The name of each property must be unique, for example:
            &quot;NiFi Identity A&quot;, &quot;NiFi Identity B&quot;, &quot;NiFi Identity C&quot; or &quot;NiFi Identity
            1&quot;, &quot;NiFi Identity 2&quot;, &quot;NiFi Identity 3&quot;
            NOTE: Any identity mapping rules specified in nifi-registry.properties will also be applied to the NiFi
            identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
        </description>
        <value>
            &lt;!-- Provide the identity (typically a DN) of NiFi nodes. --&gt;

            &lt;!--
            &lt;property name="NiFi Identity 1"&gt;&lt;/property&gt;
            &lt;property name="NiFi Identity 2"&gt;&lt;/property&gt;
            &lt;property name="NiFi Identity 3"&gt;&lt;/property&gt;
            &lt;property name="NiFi Identity 4"&gt;&lt;/property&gt;
            --&gt;
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>


</configuration>
