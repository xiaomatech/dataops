<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<configuration>

    <property>
        <name>nifi.registry.web.war.directory</name>
        <value>{{ nifi_registry_install_dir }}/lib</value>
        <on-ambari-upgrade add="true"/>
        <description>This is the location of the web war directory.</description>
    </property>

    <property>
        <name>nifi.registry.web.http.host</name>
        <value>{{ nifi_registry_nonssl_host }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The HTTP host</description>
    </property>

    <property>
        <name>nifi.registry.web.http.port</name>
        <value>{{ nifi_registry_port }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The HTTP port</description>
    </property>

    <property>
        <name>nifi.registry.web.https.host</name>
        <value>{{ nifi_registry_ssl_host }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The HTTPS host</description>
    </property>

    <property>
        <name>nifi.registry.web.https.port</name>
        <value>{{ nifi_registry_ssl_port }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The HTTPS port</description>
    </property>

    <property>
        <name>nifi.registry.web.jetty.working.directory</name>
        <value>{{ nifi_registry_internal_dir }}/work/jetty</value>
        <on-ambari-upgrade add="true"/>
        <description>The location of the Jetty working directory.</description>
    </property>

    <property>
        <name>nifi.registry.web.jetty.threads</name>
        <value>200</value>
        <on-ambari-upgrade add="true"/>
        <description>The number of Jety threads. The default value is 200.</description>
    </property>

    <property>
        <name>nifi.registry.security.keystore</name>
        <value>{{ nifi_registry_keystore }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The full path and name of the keystore. It is blank by default.</description>
    </property>

    <property>
        <name>nifi.registry.security.keystoreType</name>
        <value>{{ nifi_registry_keystoreType }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The keystore type. It is blank by default.</description>
    </property>

    <property>
        <name>nifi.registry.security.keystorePasswd</name>
        <value>{{ nifi_registry_keystorePasswd }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The keystore password. It is blank by default.</description>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
            <type>password</type>
        </value-attributes>
    </property>

    <property>
        <name>nifi.registry.security.keyPasswd</name>
        <value>{{ nifi_registry_keyPasswd }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The key password. It is blank by default.</description>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
            <type>password</type>
        </value-attributes>
    </property>

    <property>
        <name>nifi.registry.security.truststore</name>
        <value>{{ nifi_registry_truststore }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The full path and name of the truststore. It is blank by default.</description>
    </property>

    <property>
        <name>nifi.registry.security.truststoreType</name>
        <value>{{ nifi_registry_truststoreType }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The truststore type. It is blank by default.</description>
    </property>

    <property>
        <name>nifi.registry.security.truststorePasswd</name>
        <value>{{ nifi_registry_truststorePasswd }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The truststore password. It is blank by default.</description>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
            <type>password</type>
        </value-attributes>
    </property>

    <property>
        <name>nifi.registry.security.needClientAuth</name>
        <value>{{ nifi_registry_needClientAuth }}</value>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>This indicates whether client authentication is required for TLS/SSL. It is blank by default.
        </description>
    </property>

    <property>
        <name>nifi.registry.security.identity.providers.configuration.file</name>
        <value>{{ nifi_registry_config_dir }}/identity-providers.xml</value>
        <on-ambari-upgrade add="true"/>
        <description>The full path and name of the identity providers configuration file.</description>
    </property>

    <property>
        <name>nifi.registry.security.identity.provider</name>
        <value></value>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>The identifier of the identity provider to use from the identity providers configuration file. The
            default value is blank.
        </description>
    </property>

    <property>
        <name>nifi.registry.security.authorizers.configuration.file</name>
        <value>{{ nifi_registry_config_dir }}/authorizers.xml</value>
        <on-ambari-upgrade add="true"/>
        <description>The full path and name of the authorizers configuration file.</description>
    </property>

    <property>
        <name>nifi.registry.security.authorizer</name>
        <value>{{ nifi_registry_authorizer }}</value>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>The identifier of the authorizer to use from the identity providers configuration file.
        </description>
    </property>

    <property>
        <name>nifi.registry.providers.configuration.file</name>
        <value>{{ nifi_registry_config_dir }}/providers.xml</value>
        <on-ambari-upgrade add="true"/>
        <description>The full path and location of the providers configuration file.</description>
    </property>

    <!-- Database Properties -->

    <property>
        <name>nifi.registry.db.directory</name>
        <value>{{ nifi_registry_database_dir }}</value>
        <on-ambari-upgrade add="true"/>
        <description>The directory for the H2 database storage.</description>
    </property>

    <property>
        <name>nifi.registry.db.url.append</name>
        <value>;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE</value>
        <on-ambari-upgrade add="true"/>
        <description>Parameters to append to the JDBC URL for the H2 database.</description>
    </property>

    <!-- Extension Directory Properties -->

    <property>
        <name>nifi.registry.extension.dir.1</name>
        <value></value>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>A full path to a directory containing JARs for an extension. The default value is blank.
        </description>
    </property>

    <property>
        <name>nifi.registry.extension.dir.2</name>
        <value></value>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>A full path to a directory containing JARs for an extension. The default value is blank.
        </description>
    </property>

    <!-- Identity Mapping Properties -->

    <property>
        <name>nifi.registry.security.identity.mapping.pattern.dn</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>Sample DN pattern property to demonstrate normalizing DNs from certificates into a common identity
            string. Create your own patterns using nifi.security.identity.mapping.pattern.XXX convention. Sample DN
            pattern: ^CN=(.*?), OU=(.*?), O=(.*?), L=(.*?), ST=(.*?), C=(.*?)$
        </description>
    </property>

    <property>
        <name>nifi.registry.security.identity.mapping.value.dn</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>Sample DN value property to demonstrate normalizing DNs from certificates into a common identity
            string. Set values for your own patterns using nifi.security.identity.mapping.pattern.XXX convention. Sample
            DN value: $1@$2
        </description>
    </property>

    <property>
        <name>nifi.registry.security.identity.mapping.pattern.kerb</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>Sample kerberos pattern property to demonstrate normalizing DNs from Kerberos principals into a
            common identity string. Create your own patterns using nifi.security.identity.mapping.pattern.XXX
            convention. Sample kerberos pattern: ^(.*?)/instance@(.*?)$
        </description>
    </property>

    <property>
        <name>nifi.registry.security.identity.mapping.value.kerb</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>Sample kerberos value property to demonstrate normalizing DNs from Kerberos principals into a
            common identity string. Set values for your own patterns using nifi.security.identity.mapping.pattern.XXX
            convention. Sample kerberos value: $1@$2
        </description>
    </property>


    <!-- Keberos Properties -->

    <property>
        <name>nifi.registry.kerberos.krb5.file</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>The location of the krb5 file, if used. It is blank by default. At this time, only a single krb5
            file is allowed to be specified per NiFi Registry instance, so this property is configured here to support
            SPNEGO and service principles rather than in individual Processors. If necessary the krb5 file can support
            multiple realms.
        </description>
    </property>

    <property>
        <name>nifi.registry.kerberos.spnego.principal</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>The name of the Spnego service principal, if used. It is blank by default. Note that this property
            is used to authenticate NiFi users. Example: HTTP/nifi.example.com or HTTP/nifi.example.com@EXAMPLE.COM
        </description>
    </property>

    <property>
        <name>nifi.registry.kerberos.spnego.keytab.location</name>
        <value/>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>The file path of the NiFi Registry Spnego Kerberos keytab, if used. It is blank by default. Note
            that this property is used to authenticate NiFi Registry users
        </description>
    </property>

    <property>
        <name>nifi.registry.kerberos.spnego.authentication.expiration</name>
        <value>12 hours</value>
        <on-ambari-upgrade add="true"/>
        <description>The expiration duration of a successful Kerberos user authentication, if used. It is 12 hours by
            default. Example: 12 hours
        </description>
    </property>


    <!-- New DB properties -->

    <property>
        <name>nifi.registry.db.url</name>
        <value>jdbc:h2:{{ nifi_registry_database_dir }}/nifi-registry-primary;AUTOCOMMIT=OFF;DB_CLOSE_ON_EXIT=FALSE;LOCK_MODE=3;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE</value>
        <on-ambari-upgrade add="true"/>
        <description>The JDBC URL for the NiFi Registry metadata database.</description>
    </property>

    <property>
        <name>nifi.registry.db.driver.class</name>
        <value>org.h2.Driver</value>
        <on-ambari-upgrade add="true"/>
        <description>The JDBC driver for the NiFi Registry metadata database.</description>
    </property>

    <property>
        <name>nifi.registry.db.driver.directory</name>
        <value></value>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>The full path to a directory containing one or more driver related JARs to be added to the
            classpath.
            If this value is left blank then the JAR must already be on the classpath by adding it to NiFi Registry's
            lib directory.
            For H2, the driver is already bundled so this value can be left blank.
        </description>
    </property>

    <property>
        <name>nifi.registry.db.username</name>
        <value>nifireg</value>
        <on-ambari-upgrade add="true"/>
        <description>The username for the NiFi Registry metadata database.</description>
    </property>

    <property>
        <name>nifi.registry.db.password</name>
        <value></value>
        <value-attributes>
            <type>password</type>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>The password for the NiFi Registry metadata database. When using H2 this value will be used to set
            the password the first time
            the database is created. Changing this value will not automatically change the password in the database, it
            must be changed in the
            database first and then this value must be updated accordingly.
        </description>
    </property>

    <property>
        <name>nifi.registry.db.maxConnections</name>
        <value>5</value>
        <on-ambari-upgrade add="true"/>
        <description>The size of the connection pool for the NiFi Registry metadata database.</description>
    </property>

    <property>
        <name>nifi.registry.db.sql.debug</name>
        <value>false</value>
        <on-ambari-upgrade add="true"/>
        <description>Indicates whether or not SQL debug logging should be enabled for the NiFi Registry metadata
            database.
        </description>
    </property>

    <property>
        <name>nifi.registry.sensitive.props.additional.keys</name>
        <value>nifi.registry.db.password</value>
        <value-attributes>
            <empty-value-valid>true</empty-value-valid>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
        <description>This is a comma delimited list of properties that should be encrypted when written to the
            nifi-registry.properties files. Used when Encrypt Sensitive Configuration Properties is set to true.
        </description>
    </property>

</configuration>