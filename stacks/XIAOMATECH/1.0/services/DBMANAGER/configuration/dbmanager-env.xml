<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>
    <property require-input="true">
        <name>download_url_admin</name>
        <value>http://assets.example.com/archery-1.0.tar.gz</value>
        <description>download url</description>
    </property>

    <property require-input="true">
        <name>download_url_soar</name>
        <value>https://github.com/XiaoMi/soar/releases/download/0.9.0/soar.linux-amd64</value>
        <description>soar download url</description>
    </property>

    <property>
        <name>log_dir</name>
        <value>/var/log/dbmanager</value>
        <description>Log directory</description>
    </property>
    <property>
        <name>pid_dir</name>
        <value>/var/run/dbmanager</value>
        <description>run directory</description>
    </property>

    <property>
        <name>db_url</name>
        <value>jdbc:mysql://mysql_server_ip:3306/db_manager?characterEncoding=utf-8</value>
        <description>dbus db</description>
    </property>
    <property>
        <name>db_user</name>
        <value>manager</value>
        <description>database user</description>
    </property>
    <property>
        <name>db_password</name>
        <value>E_u5Ve-s2_k_a78343</value>
        <property-type>PASSWORD</property-type>
        <description>password for db</description>
        <value-attributes>
            <type>password</type>
        </value-attributes>
    </property>


    <property>
        <name>settings_content</name>
        <display-name>dbmanager settings.py</display-name>
        <description>dbmanager settings.py</description>
        <value><![CDATA[

# -*- coding: UTF-8 -*-


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'hfusaf2m4ot#7)fkw#di2bu6(cv0@opwmafx5n#6=3d%x^hpl6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# 解决nginx部署跳转404
USE_X_FORWARDED_HOST = True

# 请求限制
DATA_UPLOAD_MAX_MEMORY_SIZE = 15728640

# Application definition
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_apscheduler',
    'sql',
    'themis',
)

MIDDLEWARE = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'common.middleware.check_login_middleware.CheckLoginMiddleware',
    'common.middleware.exception_logging_middleware.ExceptionLoggingMiddleware',
)

ROOT_URLCONF = 'archery.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'common/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'common.utils.global_info.global_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'archery.wsgi.application'

# Internationalization
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False

# 时间格式化
USE_L10N = False
DATETIME_FORMAT = 'Y-m-d H:i:s'
DATE_FORMAT = 'Y-m-d'

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'common/static'), ]

# 扩展django admin里users字段用到，指定了sql/models.py里的class users
AUTH_USER_MODEL = "sql.users"

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 9,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

###############以下部分需要用户根据自己环境自行修改###################

# 该项目本身的mysql数据库地址
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'archery',
        'USER': 'admin',
        'PASSWORD': 'E_u5Ve-s2_k_a78343',
        'HOST': 'mysql',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4'
        },
        'TEST': {
            'NAME': 'test_archery',
            'CHARSET': 'utf8',
        },
    }
}

# themis审核所需mongodb数据库，账号角色必须有"anyAction" to "anyResource"权限
MONGODB_DATABASES = {
    "default": {
        "NAME": 'themis',
        "USER": 'admin',
        "PASSWORD": 'E_u5Ve-s2_k_a78343',
        "HOST": 'mongo',
        "PORT": 27017,
    },
}

# 缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, "archery"),
    }
}

# LDAP
ENABLE_LDAP = False
if ENABLE_LDAP:
    import ldap
    from django_auth_ldap.config import LDAPSearch

    AUTHENTICATION_BACKENDS = (
        'django_auth_ldap.backend.LDAPBackend',  # 配置为先使用LDAP认证，如通过认证则不再使用后面的认证方式
        'django.contrib.auth.backends.ModelBackend',  # django系统中手动创建的用户也可使用，优先级靠后。注意这2行的顺序
    )

    AUTH_LDAP_SERVER_URI = "ldap://xxx"
    AUTH_LDAP_USER_DN_TEMPLATE = "cn=%(user)s,ou=Users,dc=example,dc=com"
    AUTH_LDAP_ALWAYS_UPDATE_USER = True  # 每次登录从ldap同步用户信息
    AUTH_LDAP_USER_ATTR_MAP = {  # key为archery.sql_users字段名，value为ldap中字段名，用户同步信息
        "username": "cn",
        "display": "displayname",
        "email": "mail"
    }

# LOG配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d][%(levelname)s]- %(message)s'
        },
    },
    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'downloads/log/archery.log',
            'maxBytes': 1024 * 1024 * 100,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'default': {  # default日志，存放于log中
            'handlers': ['default'],
            'level': 'DEBUG',
        },
        'django_auth_ldap': {  # django_auth_ldap模块相关日志
            'handlers': ['default'],
            'level': 'DEBUG',
        },
        'django_apscheduler': {  # django_apscheduler模块相关日志
            'handlers': ['default'],
            'level': 'ERROR',
        },
        # 'django.db': {  # 打印SQL语句到console，方便开发
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        'django.request': {  # 打印请求错误堆栈信息到console，方便开发
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}

    ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>
    <property>
        <name>nginx_content</name>
        <display-name>dbmanager nginx conf</display-name>
        <description>dbmanager nginx conf</description>
        <value><![CDATA[
server{
    listen 80;
    server_name archery;
    client_max_body_size 20M;
    proxy_read_timeout 600s;

    location / {
      proxy_pass http://127.0.0.1:8888;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Host  $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /static {
      alias /opt/archery/static;
    }

    error_page 404 /404.html;
        location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }
}
        ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>

    <property>
        <name>backup_content</name>
        <display-name>pyxbackup conf content</display-name>
        <description>pyxbackup conf content</description>
        <value><![CDATA[
[pyxbackup]

mysql_user = backup
mysql_pass = E_u5Ve-s2_k_a78343

apply_log = 1
compress = 1
compress_with = qpress

notify_by_email = myemail@example.com,myemail2@example.com
notify_on_success = myemail@example.com,myemail2@example.com

stor_dir = /data1/backup/mysql/stor
work_dir = /data1/backup/mysql/work

remote_stor_dir = /data1/backup/mysql/stor_all/
remote_host = 127.0.0.1
ssh_opts = "-i ~/.ssh/id_rsa"
ssh_user = root

retention_sets = 2
retention_weeks = 1
retention_months = 1
retention_binlogs = 365

#encrypt = AES256
#encrypt_key_file = /etc/pyxbackup_encrypt.key

purge_bitmaps = 1

        ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>

    <property>
        <name>init_content</name>
        <display-name>dbmanager init script</display-name>
        <description>dbmanager init script</description>
        <value><![CDATA[
#!/bin/bash

cd /opt/archery
source /opt/venv4archery/bin/activate

python3.6 manage.py collectstatic -v0 --noinput
settings=${1:-"archery.settings"}
ip=${2:-"127.0.0.1"}
port=${3:-8888}

gunicorn -w 4 --env DJANGO_SETTINGS_MODULE=${settings} --error-logfile=/tmp/archery.err -b ${ip}:${port} --timeout 600  archery.wsgi:application
        ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>

    <property>
        <name>soar_content</name>
        <display-name>soar.yaml</display-name>
        <description>soar.yaml content</description>
        <value><![CDATA[
allow-online-as-test: false
drop-test-temporary: true
only-syntax-check: false
sampling-data-factor: 100
sampling: true
sampling-statistic-target: 100
profiling: false
trace: false
log-level: 7
log-output: /opt/archery/downloads/log/soar.log
report-type: markdown
ignore-rules:
- ""
max-join-table-count: 5
max-group-by-cols-count: 5
max-distinct-count: 5
max-index-cols-count: 5
max-total-rows: 9999999
spaghetti-query-length: 2048
allow-drop-index: false

explain-sql-report-type: pretty
explain-type: extended
explain-format: traditional
explain-warn-select-type:
- ""
explain-warn-access-type:
- ALL
explain-max-keys: 3
explain-min-keys: 0
explain-max-rows: 10000
explain-warn-extra:
- ""
explain-max-filtered: 100
explain-warn-scalability:
- O(n)
query: ""
list-heuristic-rules: false
list-test-sqls: false
verbose: true
        ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>


    <property>
        <name>inception_content</name>
        <display-name>inception content</display-name>
        <description>inception content</description>
        <value>
            <![CDATA[
[inception]
general_log=ON
general_log_file=/var/log/inception.log
inception_ddl_support=ON
inception_check_autoincrement_datatype=ON
inception_check_autoincrement_init_value=ON
inception_check_autoincrement_name=ON
inception_check_column_comment=ON
inception_check_column_default_value=OFF
inception_check_dml_limit=ON
inception_check_dml_orderby=ON
inception_check_dml_where=ON
inception_check_index_prefix=OFF
inception_check_insert_field=ON
inception_check_primary_key=ON
inception_check_table_comment=ON
inception_check_timestamp_default=OFF
inception_ddl_support=OFF
inception_enable_autoincrement_unsigned=OFF
inception_enable_blob_type=ON
inception_enable_column_charset=OFF
inception_enable_enum_set_bit=ON
inception_enable_foreign_key=OFF
inception_enable_identifer_keyword=ON
inception_enable_not_innodb=ON
inception_enable_nullable=ON
inception_enable_orderby_rand=ON
inception_enable_partition_table=OFF
inception_enable_select_star=ON
inception_enable_sql_statistic=ON
inception_max_char_length=36
inception_max_key_parts=5
inception_max_keys=7
inception_max_update_rows=10000
inception_merge_alter_table=ON
inception_osc_bin_dir=/usr/bin/
inception_osc_check_interval=5.000000
inception_osc_chunk_size=1000
inception_osc_chunk_size_limit=4.000000
inception_osc_chunk_time=0.100000
inception_osc_drop_new_table=ON
inception_osc_drop_old_table=ON
inception_osc_max_lag=3.000000
inception_osc_max_thread_connected=1000
inception_osc_max_thread_running=80
inception_osc_min_table_size=1
inception_osc_on=OFF
inception_osc_print_none=ON
inception_osc_print_sql=ON
inception_remote_backup_host=10.3.143.21
inception_remote_backup_port=3306
inception_remote_system_password=E_u5Ve-s2_k_a78343
inception_remote_system_user=admin
inception_support_charset=utf8mb4,utf8
interactive_timeout=28800
port=6669
socket=/var/run/inception.sock
thread_handling=one-thread-per-connection
wait_timeout=28800
            ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>

    <property>
        <name>router_content</name>
        <display-name>mysql router content</display-name>
        <description>mysql router content</description>
        <value><![CDATA[
#
# MySQL Router configuration file
#
# Documentation is available at
#    http://dev.mysql.com/doc/mysql-router/en/

[DEFAULT]
logging_folder = /var/log/mysqlrouter
runtime_folder = /var/run/mysqlrouter
config_folder = /etc/mysqlrouter

[logger]
level = INFO

# If no plugin is configured which starts a service, keepalive
# will make sure MySQL Router will not immediately exit. It is
# safe to remove once Router is configured.
[keepalive]
interval = 60
        ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>


    <property>
        <name>proxy_admin_content</name>
        <display-name>mysql proxy admin content</display-name>
        <description>mysql proxy admin content</description>
        <value><![CDATA[
# proxysql admin interface credentials.
export PROXYSQL_DATADIR='/data1/proxysql'
export PROXYSQL_USERNAME='admin'
export PROXYSQL_PASSWORD='E_u5Ve-s2_k_a78343'
export PROXYSQL_HOSTNAME='{{hostname}}'
export PROXYSQL_PORT='6032'

# proxysql monitoring user. proxysql admin script will create this user in pxc to monitor pxc-nodes.
export MONITOR_USERNAME='monitor'
export MONITOR_PASSWORD='E_u5Ve-s2_k_a78343'

# ProxySQL read/write configuration mode.
export MODE="singlewrite"

# Writer-is-reader configuration
export WRITER_IS_READER="ondemand"
      ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>


    <property>
        <name>proxy_content</name>
        <display-name>mysql proxy content</display-name>
        <description>mysql proxy content</description>
        <value><![CDATA[
datadir="/data1/proxysql"

admin_variables=
{
	admin_credentials="admin:E_u5Ve-s2_k_a78343"
	mysql_ifaces="{{hostname}}:6032"
	cluster_username="admin"
    cluster_password="E_u5Ve-s2_k_a78343"
    cluster_check_interval_ms=200
    cluster_check_status_frequency=100
    cluster_mysql_query_rules_save_to_disk=true
    cluster_mysql_servers_save_to_disk=true
    cluster_mysql_users_save_to_disk=true
    cluster_proxysql_servers_save_to_disk=true
    cluster_mysql_query_rules_diffs_before_sync={{proxy_count}}
    cluster_mysql_servers_diffs_before_sync={{proxy_count}}
    cluster_mysql_users_diffs_before_sync={{proxy_count}}
    cluster_proxysql_servers_diffs_before_sync={{proxy_count}}
}

proxysql_servers =
(
    {{proxysql}}
)


mysql_variables=
{
	threads=128
	max_connections=2048
	default_query_delay=0
	default_query_timeout=36000000
	have_compress=true
	poll_timeout=2000
	interfaces="{{hostname}}:6033"
	default_schema="information_schema"
	stacksize=1048576
	server_version="5.7.24"
	connect_timeout_server=3000
	monitor_username="monitor"
	monitor_password="E_u5Ve-s2_k_a78343"
	monitor_history=600000
	monitor_connect_interval=60000
	monitor_ping_interval=10000
	monitor_read_only_interval=1500
	monitor_read_only_timeout=500
	ping_interval_server_msec=120000
	ping_timeout_server=500
	commands_stats=true
	sessions_sort=true
	connect_retries_on_failure=10
}
      ]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="false"/>
    </property>


</configuration>
